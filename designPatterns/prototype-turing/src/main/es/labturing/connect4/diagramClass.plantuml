@startuml connect4

class framework.GameApp<G, V extends framework.GameView<G>> {
    # G game;
    # V gameView;
    # void play()
}

abstract class framework.GameView<G> {
    # G game;
    + {abstract} void start()
    + {abstract} void play()
    + {abstract} boolean resume()
}

package connect4 {
    Connect4 --|> framework.GameApp
    Connect4 : + {static} void main(args)
    Connect4 *--> GameView
    Connect4 *--> Game

    GameView -|> framework.GameView
    GameView *-> BoardView
    GameView *-> TurnView
    GameView *-> Game
    GameView : + void start()
    GameView : + void play()
    GameView : + boolean resume()
    GameView ..> YesNoDialog
    GameView ..> LanguageMenu

    TurnView *--> Turn
    TurnView --> PlayerView
    TurnView *--> PlayerViewPrototype
    TurnView : - void configTurn()
    TurnView : + void play()
    TurnView : + void writeResult()
    TurnView ..> ConfigTurnMenu

    abstract class PlayerView
    PlayerView --> Player
    PlayerView : # void showWinner()
    PlayerView : # void showPlayerTurn()
    PlayerView : # {abstract} int getColumn()
    PlayerView : + void setPlayer(player)
    PlayerView <|-- HumanPlayerView
    PlayerView <|-- MachinePlayerView

    HumanPlayerView : + int getColumn()

    abstract class MachinePlayerView
    MachinePlayerView : + int getColumn()
    MachinePlayerView : + {abstract} void showColumnSelected(column)
    MachinePlayerView <|-- RandomPlayerView
    MachinePlayerView <|-- MinMaxPlayerView

    MinMaxPlayerView : + void showColumnSelected(column)

    RandomPlayerView : + void showColumnSelected(column)

    PlayerViewPrototype : - playerViewMap
    PlayerViewPrototype : PlayerView createView(activePlayer)
    PlayerViewPrototype ..> HumanPlayerView
    PlayerViewPrototype ..> RandomPlayerView
    PlayerViewPrototype ..> MinMaxPlayerView
    PlayerViewPrototype ..> PlayerType

    BoardView : {static} int BLANK_SPACES
    BoardView *--> Board
    BoardView : + void writeln()
    BoardView : + boolean isGameFinished()

    Game *-> Board
    Game *-> Turn
    Game : + void reset()
    Game : + Board getBoard()
    Game : + Turn getTurn()

    Turn o--> Player
    Turn *--> Board
    Turn : {static} int NUMBER_PLAYERS
    Turn : - int activePlayer
    Turn : + void resetPlayers()
    Turn : + void reset()
    Turn : + void play(column)
    Turn : + Player getActivePlayer()
    Turn : + Board getBoard()
    Turn : + int getNumberPlayers()
    Turn : + void addPlayer(player)
    Turn : + int getActivePlayerIndex()
    Turn : + int activePlayerIndex()
    Turn : + Player[] getPlayers()
    Turn : + void setPlayers(players)

    abstract Player
    Player o--> Color
    Player *--> Board
    Player : + Player(board)
    Player : + void play(column)
    Player : + Color getColor()
    Player : + void setColor(color)
    Player : + boolean isComplete(column)
    Player : + boolean getBoard()
    Player : + {abstract} PlayerType getType()
    Player <|-- HumanPlayer
    Player <|-- MachinePlayer

    HumanPlayer : + HumanPlayer(board)
    HumanPlayer : + PlayerType getType()

    MachinePlayer : + MachinePlayer(board)
    MachinePlayer : + int getColumn()
    MachinePlayer <|-- RandomPlayer
    MachinePlayer <|-- MinMaxPlayer

    RandomPlayer : + RandomPlayer(board)
    RandomPlayer : + int getColumn()
    RandomPlayer : + PlayerType getType()

    MinMaxPlayer : + MinMaxPlayer(board)
    MinMaxPlayer : + int getColumn()
    MinMaxPlayer : + PlayerType getType()

    Board : + {static} int LINE_LENGTH
    Board : - Color[][] colors
    Board : + Coordinate lastDrop
    Board : + Board()
    Board : + void reset()
    Board : + void dropToken(column, color)
    Board : + boolean isEmptyPosition(coordinate)
    Board : + boolean isCompleteColumn(column)
    Board : + boolean isGameFinished()
    Board : + boolean isWinner()
    Board : + boolean getColor(coordinate)
    Board : + Color[][] getColors()
    Board : + Coordinate getLastDrop()
    Board : + void setColors(colors)
    Board : + void setLastDrop(lastDrop)

    abstract class Menu
    Menu : # title
    Menu : # options
    Menu o--> Option
    Menu : + Menu(title)
    Menu : + void interact()
    Menu : # {abstract} void addOptions()
    Menu : # void interact_()
    Menu : # void showTitles()
    Menu : # void showTitle()
    Menu : # void execChoosedOption()
    Menu : # void add(option)
    Menu : # void removeOptions()
    Menu : # boolean hasOption(option)
    Menu <|-- SequentialMenu
    Menu <|-- LanguageMenu

    class LanguageMenu << Invoker >>
    LanguageMenu : + LanguageMenu(title)
    LanguageMenu : # void addOptions()
    LanguageMenu ..> SpanishOption
    LanguageMenu ..> EnglishOption

    SequentialMenu : # steps
    SequentialMenu : # counter
    SequentialMenu : + SequentialMenu(title, steps)
    SequentialMenu : + void interact()
    SequentialMenu <|-- ConfigTurnMenu

    ConfigTurnMenu *--> Turn
    ConfigTurnMenu : + ConfigTurnMenu(turn)
    ConfigTurnMenu : # void addOptions()
    ConfigTurnMenu : # void showTitle()
    ConfigTurnMenu : # void execChoosedOption()
    ConfigTurnMenu : + void interact()
    ConfigTurnMenu ..> CreateHumanPlayerOption
    ConfigTurnMenu ..> CreateRandomPlayerOption
    ConfigTurnMenu ..> CreateAIPlayerOption

    abstract class Option
    Option : # title
    Option : + Option(title)
    Option : + {abstract} void interact()
    Option : + void showTitle(index)
    Option : # String getTitle()
    Option <|-- LanguageOption

    LanguageOption : + LanguageOption(title)
    LanguageOption <|-- SpanishOption
    LanguageOption <|-- EnglishOption

    class SpanishOption << Command >>
    SpanishOption : + SpanishOption()
    SpanishOption : + void interact()

    class EnglishOption << Command >>
    EnglishOption : + EnglishOption()
    EnglishOption : + void interact()

    CreateHumanPlayerOption --|> ConfigTurnOption
    CreateHumanPlayerOption : + void interact()

    CreateRandomPlayerOption --|> ConfigTurnOption
    CreateRandomPlayerOption : + void interact()

    CreateAIPlayerOption --|> ConfigTurnOption
    CreateAIPlayerOption : + void interact()

    ConfigTurnOption --|> Option
    ConfigTurnOption *--> Turn
    ConfigTurnOption : + ConfigTurnOption(title, turn)

}

@enduml